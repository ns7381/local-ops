<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:websocket="http://www.springframework.org/schema/websocket"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:aop="http://www.springframework.org/schema/aop" default-init-method="initialize"
       default-destroy-method="destroy"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/util
		http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/websocket
        http://www.springframework.org/schema/websocket/spring-websocket.xsd
		http://www.springframework.org/schema/cache
		http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
		http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

    <bean id="springContextHolder" class="org.springside.modules.utils.spring.SpringContextHolder" lazy-init="false"/>
    <!-- 定义受环境影响易变的变量 -->
    <bean class="com.inspur.cloudframework.spring.beans.factory.config.EncryptPropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="locations">
            <list>
                <!-- 数据源配置 -->
                <value>classpath*:/dataSource.properties</value>
            </list>
        </property>
    </bean>

    <!-- Enable annotation-based configuration. companyService and industryService
        (used in the Company Manager sample) are configured using annotations. Open
        CompanyDAO.java and IndustryDAO.java for details. -->
    <context:annotation-config/>
    
    <context:component-scan
            base-package="com.inspur.cloud.**.service,com.inspur.cloud.**.dao,com.inspur.cloud.**.controller,com.inspur.cloudframework.**.controller,com.inspur.cloudframework.**.service,com.inspur.cloudframework.**.dao">
    </context:component-scan>


    <!-- use dateFormat property to set java.util.Date's format -->
    <bean id="objectMapper" class="com.inspur.luckfly.json.jackson.map.CustomObjectMapper"></bean>

    <bean id="jackson2Converter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"><!-- com.inspur.luckfly.json.jackson.http.converter. -->
        <property name="objectMapper" ref="objectMapper"></property>
    </bean>
	<bean id="requestMappingHandlerMapping" class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
    </bean>
    <bean id="requestMappingHandlerAdapter"
          class="com.inspur.cloudframework.spring.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="jackson2Converter"/>
                <bean
                        class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
                    <constructor-arg>
                        <bean class="org.springframework.oxm.xstream.XStreamMarshaller">
                            <property name="streamDriver">
                                <bean class="com.thoughtworks.xstream.io.xml.DomDriver"/>
                            </property>

                            <property name="autodetectAnnotations">
                                <value>true</value>
                            </property>
                            <!-- <property name="annotatedClasses"> <list> </list> </property> -->
                        </bean>
                    </constructor-arg>
                </bean>
                <bean class="org.springframework.http.converter.FormHttpMessageConverter"/>
                <bean
                        class="org.springframework.http.converter.BufferedImageHttpMessageConverter"/>
                <bean
                        class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>
                <bean
                        class="org.springframework.http.converter.StringHttpMessageConverter"/>
                <bean
                        class="org.springframework.http.converter.ResourceHttpMessageConverter"/>

            </list>
        </property>
        <property name="customArgumentResolvers">
            <list>
                <bean
                        class="com.inspur.cloudframework.spring.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor">
                    <constructor-arg>
                        <list>
                            <ref bean="jackson2Converter"/>
                        </list>
                    </constructor-arg>
                    <property name="objectMapper" ref="objectMapper"></property>
                </bean>
            </list>
        </property>
        <property name="returnValueHandlers">
            <list>
                <bean
                        class="com.inspur.cloudframework.spring.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandler">
                    <property name="generate" value="true"/>
                </bean>
            </list>
        </property>
    </bean>

    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">

        <!-- one of the properties available; the maximum file size in bytes
        <property name="maxUploadSize" value="100000" />-->
    </bean>

    <bean id="handlerExceptionResolver"
          class="com.inspur.cloudframework.spring.web.servlet.handler.MappingExceptionResolver">
        <property name="defaultStatusCode" value="500"></property>
        <property name="defaultErrorView" value="/auth/commons/error"/>
        <property name="exceptionMappings">
            <props>
                <prop key="java.lang.Exception">/auth/commons/error</prop>
                <prop key="java.lang.RuntimeException">/auth/commons/error</prop>
            </props>
        </property>
        <property name="circleExceptions">
            <list>
                <value>org.springframework.dao.EmptyResultDataAccessException
                </value>
                <value>org.springframework.transaction.UnexpectedRollbackException
                </value>
            </list>
        </property>
    </bean>

    <bean id="uuidGenerator" class="com.inspur.persistence.id.UUIdGenerator"></bean>

    <!-- cloudframework-persistence相关配置 -->
    <bean id="ctx" class="com.inspur.persistence.context.GroovyContext"
          lazy-init="false" init-method="init">
        <property name="idGenerator" ref="uuidGenerator"/>
        <property name="escape" value="`"></property>
    </bean>
    <bean id="sqlPool"
          class="com.inspur.persistence.query.storage.GroovyStatementPool">
        <property name="ctx" ref="ctx"/>
    </bean>
    <bean id="storage" class="com.inspur.persistence.query.storage.Storage"
          init-method="config">
        <!-- <property name="resource"> <value>resource path</value> </property> -->
        <property name="cache" value="true"/>
        <property name="capacity" value="200"/>
        <property name="pool" ref="sqlPool"/>
        <property name="ctx" ref="ctx"/>
        <property name="parser" ref="sqlParser"/>
    </bean>
    <bean id="sqlParser" class="com.inspur.persistence.query.parser.SqlParser">
    </bean>
    <!-- JDBC Dao 配置start -->
    <bean id="queryManager"
          class="com.inspur.cloudframework.persistence.query.QueryManager">
        <property name="dataSource" ref="dataSource"/>
        <property name="ctx" ref="ctx"/>
        <property name="storage" ref="storage"/>
    </bean>

    <bean id="persistenceManager"
          class="com.inspur.cloudframework.persistence.PersistenceManager">
        <property name="dataSource" ref="dataSource"/>
        <property name="ctx" ref="ctx"/>
        <property name="qm" ref="queryManager"/>
    </bean>

    <bean id="simpleDao" class="com.inspur.cloudframework.persistence.orm.SimpleJdbcDao">
        <property name="queryManager" ref="queryManager"/>
        <property name="persistenceManager" ref="persistenceManager"/>
    </bean>
    <!-- JDBC Dao 配置end -->


    <!-- Required so swagger-springmvc can access spring's RequestMappingHandlerMapping -->
    <!-- <bean class="springfox.documentation.swagger.configuration.SwaggerCommonConfiguration"
        /> <bean class="springfox.documentation.spring.web.DocumentationCache" />
        <mvc:annotation-driven/> -->
    <!-- quartz -->
    <!--i18n-->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
        <property name="defaultLocale" value="zh"></property>
        <!-- in seconds. If set to -1, the cookie is not persisted (deleted when browser shuts down) -->
        <property name="cookieMaxAge" value="-1"/>
    </bean>
    <mvc:interceptors>
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
        </bean>
    </mvc:interceptors>
    <bean id="messageSource"
          class="com.inspur.cloudframework.spring.context.support.ResourceBundleMessageSource">
        <property name="locations">
            <list>
                <value>classpath*:/i18n/*</value>
            </list>
        </property>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="useCodeAsDefaultMessage" value="true"/>
    </bean>
    <!-- Spring Security -->
    <import resource="springSecurity.xml" />
    <!-- WebSocket -->
    <websocket:handlers>
        <websocket:mapping path="/messages" handler="webSocketHandler" />
        <websocket:handshake-interceptors>
            <bean class="com.inspur.cloud.devops.ws.HandshakeInterceptor"/>
        </websocket:handshake-interceptors>
    </websocket:handlers>
    <bean id="webSocketHandler" class="com.inspur.cloud.devops.ws.WebSocketHandler" />
</beans>

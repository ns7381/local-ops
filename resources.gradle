
buildscript {
	repositories { maven { url repositoriesUrl } }
	configurations.all {
		resolutionStrategy { cacheChangingModulesFor 0, 'seconds' //cacheDynamicVersionsFor 0, 'seconds'
		}
	}
	dependencies {
		classpath group: 'com.jcraft', name: 'jsch', version: '0.1.53'
	}
}

import groovy.json.JsonSlurper
import groovy.text.GStringTemplateEngine

def getBuildDir(context) {
    def ip = context["host"]["ip"]
    return "${buildDir}/deploy/${profile}/${ip}"
}

def genResources (context, serverbuildDir ) {
    def resourceDir = "${serverbuildDir}/resources"
    new File(resourceDir).mkdirs()
    def tplEngine = new GStringTemplateEngine()
    new File("config-tpls").eachFile {file->
        String fileName = file.name;
        String key = fileName[0..(fileName.indexOf(".")-1)]
        def appConfigs = context["app"]
        if(appConfigs[key]) {
            def template = tplEngine.createTemplate(file.getText("UTF-8")).make(appConfigs)
            new File("$resourceDir/$fileName").write(template.toString(), "UTF-8")
        } else {
            println fileName
            copy {
                from file.path
                into resourceDir
            }
        }
        
    }
    copy {
        from "${buildDir}/resources/main"
        exclude "*.properties", "test/", "cloud_config.yml"
        into "${resourceDir}"
    }
    return resourceDir
}

def parseConfig(file) {
    return new JsonSlurper().parse(new File(file), "utf-8")
}

def parseProfileConfig() {
    return parseConfig("deploy-${profile}.json")
}

def buildForProfile() {
    def config = parseProfileConfig()
    def serverTasks = []
    config["servers"].each {server->
        //println server
        def serverbuildDir = getBuildDir(server)
        //delete serverbuildDir
        
        def resourceTaskName = "resourceServer${server['host']['ip']}"
        project.task(resourceTaskName) << {
            println "---------------------------"
            genResources(server, serverbuildDir)
        }
        def resourcesDir = "${serverbuildDir}/resources"
        
        def taskName = "war${server['host']['ip']}"
        serverTasks << taskName
        project.task(taskName, type: War, dependsOn: [project.classes, project.tasks[resourceTaskName]]) {
            baseName = jarBaseName
            destinationDir = file("${serverbuildDir}/libs")
            
            
            webXml new File("$projectDir/WebContent/WEB-INF/web.xml")
            
            classpath = configurations.runtime
            manifest {
                attributes("DisableIBMJAXWSEngine" : true)
                attributes("Class-Path" : "")
                attributes("date" : new Date())
            }
            
            classpath = classpath.filter { File file ->
                !isExcludeJar(file.name)
            }
            
            exclude 'WEB-INF/web*.xml'
            rename "log4j-${profile}.properties", 'log4j.properties'
            exclude "WEB-INF/log4j.properties"
            //exclude "WEB-INF/log4j-*.properties"
            webInf {
                into('classes') {
                    from "${resourcesDir}"
                    from "${buildDir}/classes/main"
                }
                
            }
        
            //exclude "resources/commons/"
            //exclude "resources/initializer.js"
            from("${buildDir}/resourcesWeb/initializer.js") {
                into "resources/"
            }
        }
        
    }
    return serverTasks
}
def serverTasks = buildForProfile()


def deployApp(conn, libDir) {
    println "Stopping tomcat on host: ${conn.host}..."
    def tomcatHome = conn['tomcatHome']
    //runShell(testConnection, "cd ${tomcatHome}/bin/\n ./shutdown.sh\n")
    println("ps aux|grep ${tomcatHome}|grep -v grep| awk '{print \"kill -9 \" \$2}' |sh")
    execCommand(conn, "ps aux|grep ${tomcatHome}|grep -v grep| awk '{print \"kill -9 \" \$2}' |sh")
    sleep(1000)
    
    println "Deleting tomcat temp files and old iop-ops program..."
    def time = new Date().format("yyyyMMdd-HH:mm:ss")
    
    execCommand(conn, "cp ${tomcatHome}/logs/ ${tomcatHome}/logs-$time")
    execCommand(conn, "cp /var/log/iop/ /var/log/iop-$time")
    srm(conn, ["${tomcatHome}/work/Catalina/localhost/",
        "${tomcatHome}/webapps/iop-ops", "${tomcatHome}/webapps/iop-ops.war",
        "${tomcatHome}/logs/*.*", "/var/log/iop/*"])
    
    println "Deploying newest iop-ops program..."
    scp(conn, "${libDir}/${jarBaseName}-${version}.war", "${tomcatHome}/webapps/iop-ops.war")
    
    println "Starting tomcat on host: ${conn.host} ..."
    new Thread() {
        public void run() {
            println "----------------$tomcatHome----------------"
            runShell(conn, "${tomcatHome}/bin/startup.sh\n")
        }
    }.start();

    sleep(10000)
    
}


ext.serverTasks = serverTasks
ext {
    deployAppToServers = {
        println "use $profile's configuration. "
        def config = parseProfileConfig()
        config["servers"].each {server->
            def serverbuildDir = getBuildDir(server)
            def conn = server["host"]
            conn.host = conn["ip"]
            deployApp(conn, "${serverbuildDir}/libs")
        }
    }
}

